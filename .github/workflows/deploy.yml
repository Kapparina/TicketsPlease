name: Deploy Discord Bot

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get all history for proper versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/kapparina/ticketsplease
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short

      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get git tag
        id: git_tag
        run: |
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            GIT_TAG=$(git describe --tags --exact-match HEAD)
          else
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "no-tag")
          fi
          echo "tag=$GIT_TAG" >> $GITHUB_OUTPUT

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=dev
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            COMMIT=${{ steps.commit.outputs.hash }}
            GIT_TAG=${{ steps.git_tag.outputs.tag }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/ticketsplease"

      - name: Deploy docker-compose.yml
        run: |
          scp -P ${{ secrets.SSH_PORT }} docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/ticketsplease/

      - name: Create .env file with Discord Token
        run: |
          echo "TicketsPleaseBotToken=${{ secrets.DISCORD_BOT_TOKEN }}" > .env
          scp -P ${{ secrets.SSH_PORT }} .env ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/ticketsplease/
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "chmod 600 ~/ticketsplease/.env"

      - name: Create config file
        run: |
          cat > config.toml << EOF
          [Bot]
          DevGuilds = ["${{ secrets.DEV_GUILD_IDS }}"]

          [Log]
          Format = "text"
          Level = "info"
          AddSource = false
          EOF
          scp -P ${{ secrets.SSH_PORT }} config.toml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/ticketsplease/

      - name: Deploy and start service
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ~/ticketsplease && docker-compose pull && docker-compose up -d"
