name: Deploy Discord Bot

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag object type and target commit
        id: taginfo
        shell: bash
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"
          TAG_REF_NAME="${GITHUB_REF_NAME}"
          # Get the object ID referenced by the tag ref
          TAG_OBJ=$(git rev-parse --verify "$GITHUB_REF")
          if [ -z "$TAG_OBJ" ]; then
            echo "tag_object_type=unknown" >> $GITHUB_OUTPUT
            echo "tag_commit_sha=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          OBJ_TYPE=$(git cat-file -t "$TAG_OBJ")
          # If annotated, resolve the commit the tag points to; if lightweight, object is a commit already
          if [ "$OBJ_TYPE" = "tag" ]; then
            COMMIT_SHA=$(git rev-parse "$GITHUB_REF^{}")
          else
            COMMIT_SHA="$TAG_OBJ"
          fi
          echo "tag_object_type=$OBJ_TYPE" >> $GITHUB_OUTPUT
          echo "tag_commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Ensure tag commit is on main
        id: onmain
        shell: bash
        run: |
          git remote set-url origin "${{ github.server_url }}/${{ github.repository }}.git"
          git fetch origin main --depth=1 || git fetch origin main --prune
          if git merge-base --is-ancestor "${{ steps.taginfo.outputs.tag_commit_sha }}" origin/main; then
            echo "reachable=true" >> $GITHUB_OUTPUT
          else
            echo "reachable=false" >> $GITHUB_OUTPUT
          fi

      - name: Show gate evaluation
        shell: bash
        run: |
          echo "Tag object type: ${{ steps.taginfo.outputs.tag_object_type }}"
          echo "Tag commit: ${{ steps.taginfo.outputs.tag_commit_sha }}"
          echo "Commit reachable from main: ${{ steps.onmain.outputs.reachable }}"

      - name: Set up Go
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        run: go build ./...

      - name: Test
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        run: go test ./...

      - name: Log in to GHCR
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version info
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        id: meta
        shell: bash
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.short_sha }}
            ghcr.io/${{ github.repository }}:main
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ steps.meta.outputs.short_sha }}
            GIT_TAG=${{ steps.meta.outputs.version }}

      - name: Deploy via docker-compose on remote host
        if: ${{ steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true' }}
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE: ghcr.io/${{ github.repository }}:main
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            mkdir -p ~/ticketsplease
            cd ~/ticketsplease
            cat > .env <<EOF
            TicketsPleaseBotToken=${DISCORD_BOT_TOKEN}
            EOF
            cat > docker-compose.yml <<'YML'
            services:
              ticketsplease:
                image: ${IMAGE}
                restart: unless-stopped
                environment:
                  - TicketsPleaseBotToken=${TicketsPleaseBotToken}
                command: ["-config","/var/lib/config.toml","-sync-commands","true"]
                volumes:
                  - ./config.toml:/var/lib/config.toml
            YML
            if [ ! -f config.toml ]; then
              cat > config.toml <<'CTOML'
              [log]
              level = "info"
              format = "text"
              add_source = true

              [bot]
              dev_guilds = []
              CTOML
            fi
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${IMAGE}
            docker compose up -d

      - name: Skip notice (not annotated or not on main)
        if: ${{ !(steps.taginfo.outputs.tag_object_type == 'tag' && steps.onmain.outputs.reachable == 'true') }}
        run: |
          echo "Skipping build/deploy because conditions not met: requires an annotated tag pointing to a commit reachable from main."
